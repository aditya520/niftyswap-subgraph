// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewExchange extends ethereum.Event {
  get params(): NewExchange__Params {
    return new NewExchange__Params(this);
  }
}

export class NewExchange__Params {
  _event: NewExchange;

  constructor(event: NewExchange) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currency(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get salt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exchange(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NiftyswapFactory extends ethereum.SmartContract {
  static bind(address: Address): NiftyswapFactory {
    return new NiftyswapFactory("NiftyswapFactory", address);
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPairExchanges(_token: Address, _currency: Address): Array<Address> {
    let result = super.call(
      "getPairExchanges",
      "getPairExchanges(address,address):(address[])",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_currency)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getPairExchanges(
    _token: Address,
    _currency: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPairExchanges",
      "getPairExchanges(address,address):(address[])",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  tokensToExchange(param0: Address, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "tokensToExchange",
      "tokensToExchange(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_tokensToExchange(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokensToExchange",
      "tokensToExchange(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateExchangeCall extends ethereum.Call {
  get inputs(): CreateExchangeCall__Inputs {
    return new CreateExchangeCall__Inputs(this);
  }

  get outputs(): CreateExchangeCall__Outputs {
    return new CreateExchangeCall__Outputs(this);
  }
}

export class CreateExchangeCall__Inputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _instance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateExchangeCall__Outputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
