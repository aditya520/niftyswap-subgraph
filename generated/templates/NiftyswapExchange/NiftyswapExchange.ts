// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CurrencyPurchase extends ethereum.Event {
  get params(): CurrencyPurchase__Params {
    return new CurrencyPurchase__Params(this);
  }
}

export class CurrencyPurchase__Params {
  _event: CurrencyPurchase;

  constructor(event: CurrencyPurchase) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokensSoldIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get tokensSoldAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get currencyBoughtAmounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get tokenAmounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get currencyAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get tokenAmounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get currencyAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class ParentOwnerChanged extends ethereum.Event {
  get params(): ParentOwnerChanged__Params {
    return new ParentOwnerChanged__Params(this);
  }
}

export class ParentOwnerChanged__Params {
  _event: ParentOwnerChanged;

  constructor(event: ParentOwnerChanged) {
    this._event = event;
  }

  get previousParent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newParent(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoyaltyChanged extends ethereum.Event {
  get params(): RoyaltyChanged__Params {
    return new RoyaltyChanged__Params(this);
  }
}

export class RoyaltyChanged__Params {
  _event: RoyaltyChanged;

  constructor(event: RoyaltyChanged) {
    this._event = event;
  }

  get royaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get royaltyFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensPurchase extends ethereum.Event {
  get params(): TokensPurchase__Params {
    return new TokensPurchase__Params(this);
  }
}

export class TokensPurchase__Params {
  _event: TokensPurchase;

  constructor(event: TokensPurchase) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokensBoughtIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get tokensBoughtAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get currencySoldAmounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NiftyswapExchange__getRoyaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRecipient(): Address {
    return this.value0;
  }

  getRoyalty(): BigInt {
    return this.value1;
  }
}

export class NiftyswapExchange extends ethereum.SmartContract {
  static bind(address: Address): NiftyswapExchange {
    return new NiftyswapExchange("NiftyswapExchange", address);
  }

  balanceOf(_owner: Address, _id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(_owners: Array<Address>, _ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_owners),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    _owners: Array<Address>,
    _ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_owners),
        ethereum.Value.fromUnsignedBigIntArray(_ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  buyTokens(
    _tokenIds: Array<BigInt>,
    _tokensBoughtAmounts: Array<BigInt>,
    _maxCurrency: BigInt,
    _deadline: BigInt,
    _recipient: Address,
    _extraFeeRecipients: Array<Address>,
    _extraFeeAmounts: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "buyTokens",
      "buyTokens(uint256[],uint256[],uint256,uint256,address,address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(_tokensBoughtAmounts),
        ethereum.Value.fromUnsignedBigInt(_maxCurrency),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromAddressArray(_extraFeeRecipients),
        ethereum.Value.fromUnsignedBigIntArray(_extraFeeAmounts)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_buyTokens(
    _tokenIds: Array<BigInt>,
    _tokensBoughtAmounts: Array<BigInt>,
    _maxCurrency: BigInt,
    _deadline: BigInt,
    _recipient: Address,
    _extraFeeRecipients: Array<Address>,
    _extraFeeAmounts: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "buyTokens",
      "buyTokens(uint256[],uint256[],uint256,uint256,address,address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(_tokensBoughtAmounts),
        ethereum.Value.fromUnsignedBigInt(_maxCurrency),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromAddressArray(_extraFeeRecipients),
        ethereum.Value.fromUnsignedBigIntArray(_extraFeeAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBuyPrice(
    _assetBoughtAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetBoughtAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    _assetBoughtAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetBoughtAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceWithRoyalty(
    _tokenId: BigInt,
    _assetBoughtAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): BigInt {
    let result = super.call(
      "getBuyPriceWithRoyalty",
      "getBuyPriceWithRoyalty(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceWithRoyalty(
    _tokenId: BigInt,
    _assetBoughtAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceWithRoyalty",
      "getBuyPriceWithRoyalty(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrencyInfo(): Address {
    let result = super.call(
      "getCurrencyInfo",
      "getCurrencyInfo():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCurrencyInfo(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurrencyInfo",
      "getCurrencyInfo():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrencyReserves(_ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "getCurrencyReserves",
      "getCurrencyReserves(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)]
    );

    return result[0].toBigIntArray();
  }

  try_getCurrencyReserves(
    _ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getCurrencyReserves",
      "getCurrencyReserves(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFactoryAddress(): Address {
    let result = super.call(
      "getFactoryAddress",
      "getFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFactoryAddress",
      "getFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGlobalRoyaltyFee(): BigInt {
    let result = super.call(
      "getGlobalRoyaltyFee",
      "getGlobalRoyaltyFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getGlobalRoyaltyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGlobalRoyaltyFee",
      "getGlobalRoyaltyFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlobalRoyaltyRecipient(): Address {
    let result = super.call(
      "getGlobalRoyaltyRecipient",
      "getGlobalRoyaltyRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGlobalRoyaltyRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGlobalRoyaltyRecipient",
      "getGlobalRoyaltyRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrice_currencyToToken(
    _ids: Array<BigInt>,
    _tokensBought: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "getPrice_currencyToToken",
      "getPrice_currencyToToken(uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_tokensBought)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getPrice_currencyToToken(
    _ids: Array<BigInt>,
    _tokensBought: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPrice_currencyToToken",
      "getPrice_currencyToToken(uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_tokensBought)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrice_tokenToCurrency(
    _ids: Array<BigInt>,
    _tokensSold: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "getPrice_tokenToCurrency",
      "getPrice_tokenToCurrency(uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_tokensSold)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getPrice_tokenToCurrency(
    _ids: Array<BigInt>,
    _tokensSold: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPrice_tokenToCurrency",
      "getPrice_tokenToCurrency(uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_tokensSold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRoyalties(_royaltyRecipient: Address): BigInt {
    let result = super.call("getRoyalties", "getRoyalties(address):(uint256)", [
      ethereum.Value.fromAddress(_royaltyRecipient)
    ]);

    return result[0].toBigInt();
  }

  try_getRoyalties(_royaltyRecipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties(address):(uint256)",
      [ethereum.Value.fromAddress(_royaltyRecipient)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyaltyInfo(
    _tokenId: BigInt,
    _cost: BigInt
  ): NiftyswapExchange__getRoyaltyInfoResult {
    let result = super.call(
      "getRoyaltyInfo",
      "getRoyaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_cost)
      ]
    );

    return new NiftyswapExchange__getRoyaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getRoyaltyInfo(
    _tokenId: BigInt,
    _cost: BigInt
  ): ethereum.CallResult<NiftyswapExchange__getRoyaltyInfoResult> {
    let result = super.tryCall(
      "getRoyaltyInfo",
      "getRoyaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_cost)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NiftyswapExchange__getRoyaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getSellPrice(
    _assetSoldAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetSoldAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    _assetSoldAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetSoldAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceWithRoyalty(
    _tokenId: BigInt,
    _assetSoldAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): BigInt {
    let result = super.call(
      "getSellPriceWithRoyalty",
      "getSellPriceWithRoyalty(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_assetSoldAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceWithRoyalty(
    _tokenId: BigInt,
    _assetSoldAmount: BigInt,
    _assetSoldReserve: BigInt,
    _assetBoughtReserve: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceWithRoyalty",
      "getSellPriceWithRoyalty(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_assetSoldAmount),
        ethereum.Value.fromUnsignedBigInt(_assetSoldReserve),
        ethereum.Value.fromUnsignedBigInt(_assetBoughtReserve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAddress(): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalSupply(_ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "getTotalSupply",
      "getTotalSupply(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)]
    );

    return result[0].toBigIntArray();
  }

  try_getTotalSupply(_ids: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _amounts: Array<BigInt>,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _amounts: Array<BigInt>,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _amount: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _amount: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _currencyAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _tokensBoughtAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _maxCurrency(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _extraFeeRecipients(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get _extraFeeAmounts(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class ChangeOwnableParentCall extends ethereum.Call {
  get inputs(): ChangeOwnableParentCall__Inputs {
    return new ChangeOwnableParentCall__Inputs(this);
  }

  get outputs(): ChangeOwnableParentCall__Outputs {
    return new ChangeOwnableParentCall__Outputs(this);
  }
}

export class ChangeOwnableParentCall__Inputs {
  _call: ChangeOwnableParentCall;

  constructor(call: ChangeOwnableParentCall) {
    this._call = call;
  }

  get _newParent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnableParentCall__Outputs {
  _call: ChangeOwnableParentCall;

  constructor(call: ChangeOwnableParentCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SendRoyaltiesCall extends ethereum.Call {
  get inputs(): SendRoyaltiesCall__Inputs {
    return new SendRoyaltiesCall__Inputs(this);
  }

  get outputs(): SendRoyaltiesCall__Outputs {
    return new SendRoyaltiesCall__Outputs(this);
  }
}

export class SendRoyaltiesCall__Inputs {
  _call: SendRoyaltiesCall;

  constructor(call: SendRoyaltiesCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SendRoyaltiesCall__Outputs {
  _call: SendRoyaltiesCall;

  constructor(call: SendRoyaltiesCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoCall__Inputs {
    return new SetRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoCall__Outputs {
    return new SetRoyaltyInfoCall__Outputs(this);
  }
}

export class SetRoyaltyInfoCall__Inputs {
  _call: SetRoyaltyInfoCall;

  constructor(call: SetRoyaltyInfoCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetRoyaltyInfoCall__Outputs {
  _call: SetRoyaltyInfoCall;

  constructor(call: SetRoyaltyInfoCall) {
    this._call = call;
  }
}
